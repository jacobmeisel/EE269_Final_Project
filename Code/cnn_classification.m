num_classes = 5;

trdata_dir = 'trainCWT/';
tedata_dir = 'testCWT/';
parent_dir ='.';

% import the data
trImages = imageDatastore(fullfile(parent_dir,trdata_dir),...
    'IncludeSubfolders',true,...
    'LabelSource','foldernames');
trImages.ReadFcn = @customReadDatastoreImage;
teImages = imageDatastore(fullfile(parent_dir,tedata_dir),...
    'IncludeSubfolders',true,...
    'LabelSource','foldernames');
teImages.ReadFcn = @customReadDatastoreImage;
trImages.Labels=categorical(trainLabel);
teImages.Labels=categorical(testLabel);

% Augmented data
tr32Data= [];
for i=1:size(trainT,1)
    disp(i);
    t= readimage(trImages,i);
    tr32Data = [tr32Data t];
end
tr32Data= permute(reshape(tr32Data,32,32,87554,3),[1 2 4 3]);
augmenter = imageDataAugmenter( ...
    'RandRotation',[0 360], ...
    'RandScale',[0.5 1],...
    'RandXReflection',1,...
    'RandYReflection', 1);
augtrImages = augmentedImageDatastore([32 32 1],tr32Data, categorical(trainLabel),'DataAugmentation',augmenter);

rng default
imgsTrain = trImages;
imgsTest = teImages;
disp(['Number of training images: ',num2str(numel(imgsTrain.Files))]);
disp(['Number of validation images: ',num2str(numel(imgsTest.Files))]);

% import googlenet
net = googlenet;
disp("Got the net");
lgraph = layerGraph(net);
newDropoutLayer = dropoutLayer(0.65, 'Name','new_Dropout');
lgraph= replaceLayer(lgraph, 'pool5-drop_7x7_s1',newDropoutLayer);
numClasses= 5;
newConnectedLayer = fullyConnectedLayer(5,'Name','new_fc',...
    'WeightLearnRateFactor',5,'BiasLearnRateFactor',5);
lgraph = replaceLayer(lgraph,'loss3-classifier',newConnectedLayer);
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,'output',newClassLayer);

options = trainingOptions('adam',...
    'MiniBatchSize',128,...
    'MaxEpochs',3,...
    'InitialLearnRate',5e-3,...
    'Verbose',1,...
    'ExecutionEnvironment','cpu',...
    'Plots','training-progress',...
    'CheckpointPath', 'checkpoints/');
rng default
trainedGN = trainNetwork(trImages,lgraph,options);

[YPred,probs]=classify(net,imgsTest);
accuracy = mean(YPred==imgsTest.Labels);
disp(accuracy);

load('checkpoints/net_checkpoint__3502__2020_11_08__08_52_22.mat','net');
options2 = trainingOptions('adam',...
    'MiniBatchSize',100,...
    'MaxEpochs',2,...
    'InitialLearnRate',1e-3,...
    'LearnRateDropFactor', 0.1,...
    'LearnRateDropPeriod', 1,...
    'Verbose',1,...
    'LearnRateSchedule','piecewise',...
    'ExecutionEnvironment','cpu',...
    'Plots','training-progress',...
    'CheckpointPath', 'checkpoints/');
net2= trainNetwork(trImages,layerGraph(net),options2);

load('checkpoints/net_checkpoint__1750__2020_11_10__10_56_30.mat','net');
[YPredE1,probs]=classify(net,imgsTest);
accuracyE1 = mean(YPredE1==imgsTest.Labels);
disp(accuracyE1);

netB = lgraph_2; %Adam + 1e-3: netFinBAug and netFinB
optionsB = trainingOptions('sgdm',...
    'MiniBatchSize',2800,...
    'MaxEpochs',1,...
    'InitialLearnRate',1e-2,...
    'Verbose',1,...
    'ExecutionEnvironment','cpu',...
    'Plots','training-progress',...
    'CheckpointPath', 'checkpoints/');
netFinB= trainNetwork(trImages,netB,optionsB); %MB size: 400
netFinBAug = trainNetwork(augtrImages,netB,optionsB);
netFinBAugB = trainNetwork(augtrImages,netB,optionsB);

[YPredAE1,~]=classify(netFinBAugB,imgsTest);
accAE1 = mean(YPredAE1==imgsTest.Labels);
disp(accAE1); %E1 of SGDM 1e-4 aug data, 

optionsB2 = trainingOptions('sgdm',...
    'MiniBatchSize',2800,...
    'MaxEpochs',2,...
    'InitialLearnRate',1e-3,...
    'Verbose',1,...
    'ExecutionEnvironment','cpu',...
    'Plots','training-progress',...
    'CheckpointPath', 'checkpoints/');
netFinB2= trainNetwork(trImages,layerGraph(netFinB),optionsB2);
netFinBAug2 = trainNetwork(augtrImages,layerGraph(netFinBAug),optionsB2); %RUN THIS
netFinBAugB2 = trainNetwork(augtrImages,layerGraph(netFinBAugB),optionsB2);

load('checkpoints/augTR_SGM_2800_1e3_e1.mat','net');
netFinB2Aug2 = trainNetwork(augtrImages,layerGraph(net),optionsB2);

[YPredAugE3,~]=classify(netFinBAug,imgsTest);
accAugE3 = mean(YPredAugE3==imgsTest.Labels);
disp(accAugE3);

load('checkpoints/augTR_SGM_2800_1e3_e1.mat','net');
[YPredSGME4,~]=classify(net,imgsTest);
accSGME4 = mean(YPredSGME4==imgsTest.Labels);
disp(accSGME4);

netB2 = lgraph_4;
optionsB3 = trainingOptions('sgdm',...
    'MiniBatchSize',400,...
    'MaxEpochs',1,...
    'InitialLearnRate',1e-3,...
    'Verbose',1,...
    'ExecutionEnvironment','cpu',...
    'Plots','training-progress',...
    'CheckpointPath', 'checkpoints/');
netFinB3= trainNetwork(augtrImages,netB2,optionsB3);
%load('checkpoints/net_checkpoint__436__2020_11_10__22_30_54.mat','net');
[Y32PredA,probs]=classify(netFinB,teImages);
acc32A = mean(Y32PredA==teImages.Labels);
disp(acc32A);

load('checkpoints/net_checkpoint__218__2020_11_11__01_57_37.mat','net');
[Y32PredA4,probs]=classify(net,teImages);
acc32A4 = mean(Y32PredA4==teImages.Labels);
disp(acc32A4);